// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/campuses": {
            "get": {
                "description": "Get All Roles",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Get All Roles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "mandatory header to access endpoint",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response indicates that the request succeeded and the resources has been fetched and transmitted in the message body",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.List"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.RoleResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error. This can happen if there is an error validation while create account",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.ErrorValidationResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "$ref": "#/definitions/validator.ErrorValidateResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/v1/departments": {
            "get": {
                "description": "Get Departments from Config",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Get Departments from Config",
                "parameters": [
                    {
                        "type": "string",
                        "description": "mandatory header to access endpoint",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response indicates that the request succeeded and the resources has been fetched and transmitted in the message body",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.List"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.DepartmentsResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error. This can happen if there is an error validation while create account",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.ErrorValidationResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "$ref": "#/definitions/validator.ErrorValidateResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/v1/events/{code}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get Event and Instances by Event Code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get Event by Event Code",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "object that needs to be added",
                        "name": "code",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "mandatory header to access endpoint",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response indicates that the request succeeded and the resources has been fetched and transmitted in the message body",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.GetEventByCodeResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "instances": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.GetInstancesByEventCodeResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error. This can happen if there is an error validation while create account",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.ErrorValidationResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "$ref": "#/definitions/validator.ErrorValidateResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/v1/tokens": {
            "get": {
                "description": "Generate both Access and Refresh Token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tokens"
                ],
                "summary": "Generate Tokens",
                "parameters": [
                    {
                        "type": "string",
                        "description": "object that needs to be added",
                        "name": "Cookie",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "mandatory header to access endpoint",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response indicates that the request succeeded and the resources has been fetched and transmitted in the message body",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.List"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.TokensResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error. This can happen if there is an error validation while create account",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.ErrorValidationResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "$ref": "#/definitions/validator.ErrorValidateResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/v1/users/check/{identifier}": {
            "get": {
                "description": "To check whether user is existed or not by email or phone number",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Check User Exist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "object that needs to be added",
                        "name": "identifier",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "mandatory header to access endpoint",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response indicates that the request succeeded and the resources has been fetched and transmitted in the message body",
                        "schema": {
                            "$ref": "#/definitions/models.CheckUserExistResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error. This can happen if there is an error validation while create account",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.ErrorValidationResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "$ref": "#/definitions/validator.ErrorValidateResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/v1/users/login": {
            "post": {
                "description": "Login for all type of users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Login User",
                "parameters": [
                    {
                        "description": "User object that needs to be added",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginUserRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "mandatory header to access endpoint",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response indicates that the request succeeded and the resources has been fetched and transmitted in the message body",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.LoginUserResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "tokens": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.TokensResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error. This can happen if there is an error validation while create account",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.ErrorValidationResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "$ref": "#/definitions/validator.ErrorValidateResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/v1/users/logout": {
            "put": {
                "description": "Logout user for all kinds of user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Logout User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "mandatory header to access endpoint",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error. This can happen if there is an error validation while create account",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.ErrorValidationResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "$ref": "#/definitions/validator.ErrorValidateResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/v1/users/types": {
            "get": {
                "description": "User Type is something like volunteer, lead or etc.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get All User Types",
                "parameters": [
                    {
                        "type": "string",
                        "description": "mandatory header to access endpoint",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response indicates that the request succeeded and the resources has been fetched and transmitted in the message body",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.List"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.UserTypeResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error. This can happen if there is an error validation while create account",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.ErrorValidationResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "$ref": "#/definitions/validator.ErrorValidateResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "post": {
                "description": "User Type is something like volunteer, lead or etc.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create User Type",
                "parameters": [
                    {
                        "description": "User object that needs to be added",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateUserTypeRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "mandatory header to access endpoint",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Response indicates that the request succeeded and the resources has been fetched and transmitted in the message body",
                        "schema": {
                            "$ref": "#/definitions/models.UserTypeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error. This can happen if there is an error validation while create account",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.ErrorValidationResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "$ref": "#/definitions/validator.ErrorValidateResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/v1/users/volunteer": {
            "post": {
                "description": "Create user for volunteer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create Volunteer User",
                "parameters": [
                    {
                        "description": "User object that needs to be added",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateVolunteerRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "mandatory header to access endpoint",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Response indicates that the request succeeded and the resources has been fetched and transmitted in the message body",
                        "schema": {
                            "$ref": "#/definitions/models.CreateVolunteerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error. This can happen if there is an error validation while create account",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.ErrorValidationResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "$ref": "#/definitions/validator.ErrorValidateResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/v1/users/{communityId}": {
            "get": {
                "description": "Get all information needed about user by community id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get User By Community ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "object that needs to be added",
                        "name": "communityId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "mandatory header to access endpoint",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response indicates that the request succeeded and the resources has been fetched and transmitted in the message body",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.GetOneByCommunityIdResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "roles": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.RoleResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error. This can happen if there is an error validation while create account",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.ErrorValidationResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "$ref": "#/definitions/validator.ErrorValidateResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/v1/users/{identifier}/password": {
            "patch": {
                "description": "Update user Password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update User Password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "object that needs to be added",
                        "name": "identifier",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User object that needs to be added",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateUserPasswordRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "mandatory header to access endpoint",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Response indicates that the request succeeded and the resources has been fetched and transmitted in the message body",
                        "schema": {
                            "$ref": "#/definitions/models.UpdateUserPasswordResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error. This can happen if there is an error validation while create account",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.ErrorValidationResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "$ref": "#/definitions/validator.ErrorValidateResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/v2/events": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get All Events based on User Roles",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get All Events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "mandatory header to access endpoint",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response indicates that the request succeeded and the resources has been fetched and transmitted in the message body",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.List"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.GetAllEventsResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error. This can happen if there is an error validation while create account",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.ErrorValidationResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "$ref": "#/definitions/validator.ErrorValidateResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create event with the instances/sessions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Create Event",
                "parameters": [
                    {
                        "description": "User object that needs to be added",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateEventRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "mandatory header to access endpoint",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Response indicates that the request succeeded and the resources has been fetched and transmitted in the message body",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.CreateEventResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "instances": {
                                            "$ref": "#/definitions/models.CreateInstanceResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error. This can happen if there is an error validation while create account",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.ErrorValidationResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "$ref": "#/definitions/validator.ErrorValidateResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CampusesResponse": {
            "type": "object",
            "properties": {
                "campusCode": {
                    "type": "string",
                    "example": "BKS"
                },
                "campusName": {
                    "type": "string",
                    "example": "GROW Community Bekasi"
                },
                "type": {
                    "type": "string",
                    "example": "campus"
                }
            }
        },
        "models.CheckUserExistResponse": {
            "type": "object",
            "properties": {
                "identifier": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "example": "user"
                },
                "user": {
                    "type": "boolean"
                }
            }
        },
        "models.CreateEventRequest": {
            "type": "object",
            "required": [
                "allowedCampuses",
                "allowedFor",
                "allowedRoles",
                "allowedUsers",
                "instances",
                "locationName",
                "locationType",
                "name"
            ],
            "properties": {
                "allowedCampuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allowedFor": {
                    "type": "string",
                    "enum": [
                        "public",
                        "private"
                    ]
                },
                "allowedRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allowedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "eventEndAt": {
                    "type": "string"
                },
                "eventStartAt": {
                    "type": "string"
                },
                "instances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CreateInstanceRequest"
                    }
                },
                "isRecurring": {
                    "type": "boolean"
                },
                "locationName": {
                    "type": "string"
                },
                "locationType": {
                    "type": "string",
                    "enum": [
                        "online",
                        "onsite",
                        "hybrid"
                    ]
                },
                "name": {
                    "type": "string"
                },
                "recurrence": {
                    "type": "string"
                },
                "registerEndAt": {
                    "type": "string"
                },
                "registerStartAt": {
                    "type": "string"
                },
                "termsAndConditions": {
                    "type": "string"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.CreateEventResponse": {
            "type": "object",
            "required": [
                "instances"
            ],
            "properties": {
                "allowedCampuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allowedFor": {
                    "type": "string",
                    "example": "public"
                },
                "allowedRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allowedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "code": {
                    "type": "string",
                    "example": "bhfe382"
                },
                "description": {
                    "type": "string",
                    "example": "This event blabla"
                },
                "eventEndAt": {
                    "type": "string",
                    "example": ""
                },
                "eventStartAt": {
                    "type": "string",
                    "example": ""
                },
                "instances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CreateInstanceResponse"
                    }
                },
                "isRecurring": {
                    "type": "boolean",
                    "example": true
                },
                "locationName": {
                    "type": "string",
                    "example": "PIOT 6 Lt. 6"
                },
                "locationType": {
                    "type": "string",
                    "example": "offline"
                },
                "recurrence": {
                    "type": "string",
                    "example": "monthly"
                },
                "registerEndAt": {
                    "type": "string",
                    "example": ""
                },
                "registerStartAt": {
                    "type": "string",
                    "example": ""
                },
                "status": {
                    "type": "string",
                    "example": "available"
                },
                "termsAndConditions": {
                    "type": "string",
                    "example": "This event blabla"
                },
                "title": {
                    "type": "string",
                    "example": "Homebase"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "example": "event"
                }
            }
        },
        "models.CreateInstanceRequest": {
            "type": "object",
            "required": [
                "instanceEndAt",
                "instanceStartAt",
                "locationName",
                "locationType",
                "registerEndAt",
                "registerStartAt",
                "title"
            ],
            "properties": {
                "allowPersonalQr": {
                    "type": "boolean"
                },
                "attendanceType": {
                    "type": "string",
                    "enum": [
                        "check-in",
                        "check-out",
                        "both",
                        "none"
                    ]
                },
                "description": {
                    "type": "string"
                },
                "instanceEndAt": {
                    "type": "string"
                },
                "instanceStartAt": {
                    "type": "string"
                },
                "isOnePerAccount": {
                    "type": "boolean"
                },
                "isOnePerTicket": {
                    "type": "boolean"
                },
                "isRequired": {
                    "type": "boolean"
                },
                "locationName": {
                    "type": "string"
                },
                "locationType": {
                    "type": "string",
                    "enum": [
                        "online",
                        "onsite",
                        "hybrid"
                    ]
                },
                "maxPerTransaction": {
                    "type": "integer"
                },
                "registerEndAt": {
                    "type": "string"
                },
                "registerStartAt": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "totalSeats": {
                    "type": "integer"
                }
            }
        },
        "models.CreateInstanceResponse": {
            "type": "object",
            "properties": {
                "allowPersonalQr": {
                    "type": "boolean"
                },
                "attendanceType": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "eventCode": {
                    "type": "string"
                },
                "instanceCode": {
                    "type": "string"
                },
                "instanceEndAt": {
                    "type": "string"
                },
                "instanceStartAt": {
                    "type": "string"
                },
                "isOnePerAccount": {
                    "type": "boolean"
                },
                "isOnePerTicket": {
                    "type": "boolean"
                },
                "isRequired": {
                    "type": "boolean"
                },
                "locationName": {
                    "type": "string"
                },
                "locationType": {
                    "type": "string"
                },
                "maxPerTransaction": {
                    "type": "integer"
                },
                "registerEndAt": {
                    "type": "string"
                },
                "registerStartAt": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                },
                "title": {
                    "type": "string"
                },
                "totalSeats": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "models.CreateRoleRequest": {
            "type": "object",
            "required": [
                "role"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "View specifically for event"
                },
                "role": {
                    "type": "string",
                    "example": "event-view-volunteer"
                }
            }
        },
        "models.CreateUserRequest": {
            "type": "object",
            "required": [
                "dateOfBirth",
                "isBaptized",
                "isKom100",
                "name",
                "password",
                "placeOfBirth",
                "userTypes"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "campusCode": {
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 3,
                    "example": "001"
                },
                "coolId": {
                    "type": "integer",
                    "example": 1
                },
                "dateOfBirth": {
                    "type": "string"
                },
                "department_code": {
                    "type": "string",
                    "example": "MUSIC"
                },
                "email": {
                    "type": "string",
                    "example": "jeremy@gmail.com"
                },
                "gender": {
                    "type": "string",
                    "enum": [
                        "male",
                        "female"
                    ]
                },
                "isBaptized": {
                    "type": "boolean"
                },
                "isKom100": {
                    "type": "boolean"
                },
                "jemaatId": {
                    "type": "string"
                },
                "kkjNumber": {
                    "type": "string"
                },
                "maritalStatus": {
                    "type": "string",
                    "enum": [
                        "single",
                        "married",
                        "others"
                    ],
                    "example": "active"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "Professionals"
                },
                "password": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 6,
                    "example": "Professionals"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "placeOfBirth": {
                    "type": "string"
                },
                "userTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "volunteer"
                    ]
                }
            }
        },
        "models.CreateUserResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "campusCode": {
                    "type": "string"
                },
                "communityId": {
                    "type": "string"
                },
                "coolId": {
                    "type": "integer",
                    "example": 1
                },
                "dateOfBirth": {
                    "type": "string"
                },
                "departmentCode": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "isBaptized": {
                    "type": "boolean"
                },
                "isKom100": {
                    "type": "boolean"
                },
                "jemaatId": {
                    "type": "string"
                },
                "kkjNumber": {
                    "type": "string"
                },
                "maritalStatus": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "example": "Profesionals"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "placeOfBirth": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                },
                "type": {
                    "type": "string",
                    "example": "user"
                },
                "userTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.CreateUserTypeRequest": {
            "type": "object",
            "required": [
                "category",
                "name",
                "roles",
                "userType"
            ],
            "properties": {
                "category": {
                    "type": "string",
                    "enum": [
                        "general",
                        "internal",
                        "cool"
                    ]
                },
                "description": {
                    "type": "string",
                    "example": "General Volunteer"
                },
                "name": {
                    "type": "string",
                    "example": "Volunteer"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "event-view-volunteer",
                        " event-edit-volunteer"
                    ]
                },
                "userType": {
                    "type": "string",
                    "example": "volunteer"
                }
            }
        },
        "models.CreateVolunteerRequest": {
            "type": "object",
            "required": [
                "coolId",
                "dateOfBirth",
                "department_code",
                "isBaptized",
                "isKom100",
                "name",
                "password",
                "placeOfBirth",
                "userTypes"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "campusCode": {
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 3,
                    "example": "001"
                },
                "coolId": {
                    "type": "integer",
                    "example": 1
                },
                "dateOfBirth": {
                    "type": "string"
                },
                "department_code": {
                    "type": "string",
                    "example": "MUSIC"
                },
                "email": {
                    "type": "string",
                    "example": "jeremy@gmail.com"
                },
                "gender": {
                    "type": "string",
                    "enum": [
                        "male",
                        "female"
                    ]
                },
                "isBaptized": {
                    "type": "boolean"
                },
                "isKom100": {
                    "type": "boolean"
                },
                "jemaatId": {
                    "type": "string"
                },
                "kkjNumber": {
                    "type": "string"
                },
                "maritalStatus": {
                    "type": "string",
                    "enum": [
                        "single",
                        "married",
                        "others"
                    ],
                    "example": "active"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "Professionals"
                },
                "password": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 6,
                    "example": "Professionals"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "placeOfBirth": {
                    "type": "string"
                },
                "userTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "volunteer"
                    ]
                }
            }
        },
        "models.CreateVolunteerResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "campusCode": {
                    "type": "string"
                },
                "communityId": {
                    "type": "string"
                },
                "coolId": {
                    "type": "integer",
                    "example": 1
                },
                "dateOfBirth": {
                    "type": "string"
                },
                "departmentCode": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "isBaptized": {
                    "type": "boolean"
                },
                "isKom100": {
                    "type": "boolean"
                },
                "jemaatId": {
                    "type": "string"
                },
                "kkjNumber": {
                    "type": "string"
                },
                "maritalStatus": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "example": "Profesionals"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "placeOfBirth": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                },
                "type": {
                    "type": "string",
                    "example": "coolCategory"
                },
                "userTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.DepartmentsResponse": {
            "type": "object",
            "properties": {
                "departmentCode": {
                    "type": "string",
                    "example": "TC"
                },
                "departmentName": {
                    "type": "string",
                    "example": "Take Care Department"
                },
                "type": {
                    "type": "string",
                    "example": "department"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "value cannot be blabla"
                },
                "status": {
                    "type": "string",
                    "example": "INVALID_VALUES"
                }
            }
        },
        "models.ErrorValidationResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 422
                },
                "errors": {},
                "message": {
                    "type": "string",
                    "example": "Validation failed for one or more fields."
                }
            }
        },
        "models.GetAllEventsResponse": {
            "type": "object",
            "properties": {
                "allowedCampuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allowedFor": {
                    "type": "string",
                    "example": "public"
                },
                "allowedRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allowedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "availabilityStatus": {
                    "type": "string",
                    "example": "available"
                },
                "code": {
                    "type": "string",
                    "example": "2024-HOMEBASE"
                },
                "eventEndAt": {
                    "type": "string",
                    "example": ""
                },
                "eventStartAt": {
                    "type": "string",
                    "example": ""
                },
                "isRecurring": {
                    "type": "boolean",
                    "example": true
                },
                "locationType": {
                    "type": "string",
                    "example": "offline"
                },
                "recurrence": {
                    "type": "string",
                    "example": "monthly"
                },
                "registerEndAt": {
                    "type": "string",
                    "example": ""
                },
                "registerStartAt": {
                    "type": "string",
                    "example": ""
                },
                "title": {
                    "type": "string",
                    "example": "Homebase"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "totalRemainingSeats": {
                    "type": "integer",
                    "example": 2
                },
                "type": {
                    "type": "string",
                    "example": "Event"
                }
            }
        },
        "models.GetEventByCodeResponse": {
            "type": "object",
            "properties": {
                "allowedCampuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allowedFor": {
                    "type": "string",
                    "example": "public"
                },
                "allowedRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allowedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "availabilityStatus": {
                    "type": "string",
                    "example": "available"
                },
                "code": {
                    "type": "string",
                    "example": "bhfe382"
                },
                "description": {
                    "type": "string",
                    "example": "This event blabla"
                },
                "eventEndAt": {
                    "type": "string",
                    "example": ""
                },
                "eventStartAt": {
                    "type": "string",
                    "example": ""
                },
                "instances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.GetInstancesByEventCodeResponse"
                    }
                },
                "isRecurring": {
                    "type": "boolean",
                    "example": true
                },
                "locationName": {
                    "type": "string",
                    "example": "PIOT 6 Lt. 6"
                },
                "locationType": {
                    "type": "string",
                    "example": "offline"
                },
                "recurrence": {
                    "type": "string",
                    "example": "monthly"
                },
                "registerEndAt": {
                    "type": "string",
                    "example": ""
                },
                "registerStartAt": {
                    "type": "string",
                    "example": ""
                },
                "termsAndConditions": {
                    "type": "string",
                    "example": "This event blabla"
                },
                "title": {
                    "type": "string",
                    "example": "Homebase"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "example": "event"
                }
            }
        },
        "models.GetInstancesByEventCodeResponse": {
            "type": "object",
            "properties": {
                "LocationName": {
                    "type": "string",
                    "example": "PIOT 6 Lt. 6"
                },
                "allowPersonalQr": {
                    "type": "boolean"
                },
                "attendanceType": {
                    "type": "string"
                },
                "availabilityStatus": {
                    "type": "string",
                    "example": "available"
                },
                "bookedSeats": {
                    "type": "integer",
                    "example": 0
                },
                "code": {
                    "type": "string",
                    "example": "2024-HOMEBASE"
                },
                "description": {
                    "type": "string",
                    "example": "Homebase"
                },
                "instanceEndAt": {
                    "type": "string",
                    "example": ""
                },
                "instanceStartAt": {
                    "type": "string",
                    "example": ""
                },
                "isOnePerAccount": {
                    "type": "boolean"
                },
                "isOnePerTicket": {
                    "type": "boolean"
                },
                "isRequired": {
                    "type": "boolean"
                },
                "locationType": {
                    "type": "string",
                    "example": "offline"
                },
                "maxPerTransaction": {
                    "type": "integer"
                },
                "registerEndAt": {
                    "type": "string",
                    "example": ""
                },
                "registerStartAt": {
                    "type": "string",
                    "example": ""
                },
                "title": {
                    "type": "string",
                    "example": "Homebase"
                },
                "totalRemainingSeats": {
                    "type": "integer",
                    "example": 0
                },
                "totalSeats": {
                    "type": "integer",
                    "example": 0
                },
                "type": {
                    "type": "string",
                    "example": "eventInstance"
                }
            }
        },
        "models.GetOneByCommunityIdResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "campusCode": {
                    "type": "string"
                },
                "campusName": {
                    "type": "string"
                },
                "communityId": {
                    "type": "string"
                },
                "coolId": {
                    "type": "integer",
                    "example": 1
                },
                "coolName": {
                    "type": "string"
                },
                "dateOfBirth": {
                    "type": "string"
                },
                "departmentCode": {
                    "type": "string"
                },
                "departmentName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "isBaptized": {
                    "type": "boolean"
                },
                "isKom100": {
                    "type": "boolean"
                },
                "jemaatId": {
                    "type": "string"
                },
                "kkjNumber": {
                    "type": "string"
                },
                "maritalStatus": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "example": "Profesionals"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "placeOfBirth": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RoleResponse"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "active"
                },
                "type": {
                    "type": "string",
                    "example": "coolCategory"
                },
                "userTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.List": {
            "type": "object",
            "properties": {
                "data": {},
                "totalRows": {
                    "type": "integer"
                },
                "type": {
                    "type": "string",
                    "example": "collection"
                }
            }
        },
        "models.LoginUserRequest": {
            "type": "object",
            "required": [
                "identifier",
                "password"
            ],
            "properties": {
                "identifier": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.LoginUserResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "campusCode": {
                    "type": "string"
                },
                "communityId": {
                    "type": "string"
                },
                "coolId": {
                    "type": "integer",
                    "example": 1
                },
                "dateOfBirth": {
                    "type": "string"
                },
                "departmentCode": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "isBaptized": {
                    "type": "boolean"
                },
                "isKom100": {
                    "type": "boolean"
                },
                "jemaatId": {
                    "type": "string"
                },
                "kkjNumber": {
                    "type": "string"
                },
                "maritalStatus": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "example": "Profesionals"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "placeOfBirth": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "active"
                },
                "tokens": {
                    "type": "array",
                    "items": {}
                },
                "type": {
                    "type": "string",
                    "example": "coolCategory"
                },
                "userTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.RoleResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "View specifically for event"
                },
                "role": {
                    "type": "string",
                    "example": "event-view-volunteer"
                },
                "type": {
                    "type": "string",
                    "example": "role"
                }
            }
        },
        "models.TokensResponse": {
            "type": "object",
            "properties": {
                "expiresAt": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "example": "accessToken"
                }
            }
        },
        "models.UpdateUserPasswordRequest": {
            "type": "object",
            "required": [
                "confirmPassword",
                "password"
            ],
            "properties": {
                "confirmPassword": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 6
                },
                "password": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 6
                }
            }
        },
        "models.UpdateUserPasswordResponse": {
            "type": "object",
            "properties": {
                "campusCode": {
                    "type": "string"
                },
                "communityId": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "example": "Profesionals"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "active"
                },
                "type": {
                    "type": "string",
                    "example": "coolCategory"
                },
                "userTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.UserTypeResponse": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string",
                    "example": "general"
                },
                "description": {
                    "type": "string",
                    "example": "Volunteer"
                },
                "name": {
                    "type": "string",
                    "example": "Volunteer"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "event-view-event-viewer"
                    ]
                },
                "type": {
                    "type": "string",
                    "example": "userType"
                },
                "userType": {
                    "type": "string",
                    "example": "volunteer"
                }
            }
        },
        "validator.ErrorValidateResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "accountNumber_required"
                },
                "field": {
                    "type": "string",
                    "example": "MISSING_FIELD"
                },
                "message": {
                    "type": "string",
                    "example": "field is missing"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
