definitions:
  models.CampusesResponse:
    properties:
      campusCode:
        example: BKS
        type: string
      campusName:
        example: GROW Community Bekasi
        type: string
      type:
        example: campus
        type: string
    type: object
  models.CheckUserExistResponse:
    properties:
      identifier:
        type: string
      type:
        example: user
        type: string
      user:
        type: boolean
    type: object
  models.CreateEventRequest:
    properties:
      allowedRoles:
        items:
          type: string
        type: array
      allowedUsers:
        items:
          type: string
        type: array
      campusCode:
        items:
          type: string
        type: array
      code:
        maxLength: 30
        minLength: 1
        type: string
      description:
        type: string
      eventEndAt:
        type: string
      eventStartAt:
        type: string
      instances:
        items:
          $ref: '#/definitions/models.CreateInstanceRequest'
        type: array
      isRecurring:
        type: boolean
      location:
        type: string
      name:
        type: string
      recurrence:
        type: string
      registerEndAt:
        type: string
      registerStartAt:
        type: string
    required:
    - allowedRoles
    - campusCode
    - code
    - instances
    - isRecurring
    - location
    - name
    type: object
  models.CreateEventResponse:
    properties:
      allowedRoles:
        items:
          type: string
        type: array
      allowedUsers:
        items:
          type: string
        type: array
      availabilityStatus:
        example: available
        type: string
      campusCode:
        items:
          type: string
        type: array
      code:
        example: 2024-HOMEBASE
        type: string
      description:
        example: This event blabla
        type: string
      eventEndAt:
        example: ""
        type: string
      eventStartAt:
        example: ""
        type: string
      instances:
        items:
          $ref: '#/definitions/models.CreateInstanceResponse'
        type: array
      isRecurring:
        example: true
        type: boolean
      location:
        example: PIOT 6 Lt. 6
        type: string
      recurrence:
        example: monthly
        type: string
      registerEndAt:
        example: ""
        type: string
      registerStartAt:
        example: ""
        type: string
      title:
        example: Homebase
        type: string
      type:
        example: Event
        type: string
    required:
    - instances
    type: object
  models.CreateInstanceRequest:
    properties:
      description:
        type: string
      eventCode:
        type: string
      instanceEndAt:
        type: string
      instanceStartAt:
        type: string
      isInherit:
        type: boolean
      isRequired:
        type: boolean
      location:
        type: string
      maxRegister:
        type: integer
      registerEndAt:
        type: string
      registerStartAt:
        type: string
      title:
        type: string
      totalSeats:
        type: integer
    required:
    - eventCode
    - instanceEndAt
    - instanceStartAt
    - isRequired
    - location
    - registerEndAt
    - registerStartAt
    - title
    type: object
  models.CreateInstanceResponse:
    properties:
      availabilityStatus:
        example: available
        type: string
      description:
        type: string
      eventCode:
        type: string
      instanceCode:
        type: string
      instanceEndAt:
        type: string
      instanceStartAt:
        type: string
      isRequired:
        type: boolean
      location:
        type: string
      maxRegister:
        type: integer
      registerEndAt:
        type: string
      registerStartAt:
        type: string
      title:
        type: string
      totalSeats:
        type: integer
      type:
        type: string
    type: object
  models.CreateRoleRequest:
    properties:
      description:
        example: View specifically for event
        type: string
      role:
        example: event-view-volunteer
        type: string
    required:
    - role
    type: object
  models.CreateUserTypeRequest:
    properties:
      description:
        example: General Volunteer
        type: string
      name:
        example: Volunteer
        type: string
      roles:
        example:
        - event-view-volunteer
        - ' event-edit-volunteer'
        items:
          type: string
        type: array
      userType:
        example: volunteer
        type: string
    required:
    - name
    - roles
    - userType
    type: object
  models.CreateVolunteerRequest:
    properties:
      address:
        type: string
      campusCode:
        example: "001"
        maxLength: 3
        minLength: 3
        type: string
      coolId:
        example: 1
        type: integer
      dateOfBirth:
        type: string
      department_code:
        example: MUSIC
        type: string
      email:
        example: jeremy@gmail.com
        type: string
      gender:
        enum:
        - male
        - female
        type: string
      isBaptized:
        type: boolean
      isKom100:
        type: boolean
      jemaatId:
        type: string
      kkjNumber:
        type: string
      maritalStatus:
        enum:
        - single
        - married
        - others
        example: active
        type: string
      name:
        example: Professionals
        maxLength: 50
        minLength: 1
        type: string
      password:
        example: Professionals
        maxLength: 50
        minLength: 6
        type: string
      phoneNumber:
        type: string
      placeOfBirth:
        type: string
    required:
    - coolId
    - dateOfBirth
    - department_code
    - isBaptized
    - isKom100
    - name
    - password
    - placeOfBirth
    type: object
  models.CreateVolunteerResponse:
    properties:
      address:
        type: string
      campusCode:
        type: string
      communityId:
        type: string
      coolId:
        example: 1
        type: integer
      dateOfBirth:
        type: string
      departmentCode:
        type: string
      email:
        type: string
      gender:
        type: string
      isBaptized:
        type: boolean
      isKom100:
        type: boolean
      jemaatId:
        type: string
      kkjNumber:
        type: string
      maritalStatus:
        type: string
      name:
        example: Profesionals
        type: string
      phoneNumber:
        type: string
      placeOfBirth:
        type: string
      status:
        example: active
        type: string
      type:
        example: coolCategory
        type: string
    type: object
  models.DepartmentsResponse:
    properties:
      departmentCode:
        example: TC
        type: string
      departmentName:
        example: Take Care Department
        type: string
      type:
        example: department
        type: string
    type: object
  models.ErrorResponse:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: value cannot be blabla
        type: string
      status:
        example: INVALID_VALUES
        type: string
    type: object
  models.ErrorValidationResponse:
    properties:
      code:
        example: 422
        type: integer
      errors: {}
      message:
        example: Validation failed for one or more fields.
        type: string
    type: object
  models.GetOneByCommunityIdResponse:
    properties:
      address:
        type: string
      campusCode:
        type: string
      campusName:
        type: string
      communityId:
        type: string
      coolId:
        example: 1
        type: integer
      coolName:
        type: string
      dateOfBirth:
        type: string
      departmentCode:
        type: string
      departmentName:
        type: string
      email:
        type: string
      gender:
        type: string
      isBaptized:
        type: boolean
      isKom100:
        type: boolean
      jemaatId:
        type: string
      kkjNumber:
        type: string
      maritalStatus:
        type: string
      name:
        example: Profesionals
        type: string
      phoneNumber:
        type: string
      placeOfBirth:
        type: string
      roles:
        items:
          $ref: '#/definitions/models.RoleResponse'
        type: array
      status:
        example: active
        type: string
      type:
        example: coolCategory
        type: string
      userType:
        type: string
    type: object
  models.List:
    properties:
      data: {}
      totalRows:
        type: integer
      type:
        example: collection
        type: string
    type: object
  models.LoginUserRequest:
    properties:
      identifier:
        type: string
      password:
        type: string
    required:
    - identifier
    - password
    type: object
  models.LoginUserResponse:
    properties:
      address:
        type: string
      campusCode:
        type: string
      communityId:
        type: string
      coolId:
        example: 1
        type: integer
      dateOfBirth:
        type: string
      departmentCode:
        type: string
      email:
        type: string
      gender:
        type: string
      isBaptized:
        type: boolean
      isKom100:
        type: boolean
      jemaatId:
        type: string
      kkjNumber:
        type: string
      maritalStatus:
        type: string
      name:
        example: Profesionals
        type: string
      phoneNumber:
        type: string
      placeOfBirth:
        type: string
      roles:
        items:
          type: string
        type: array
      status:
        example: active
        type: string
      tokens:
        items: {}
        type: array
      type:
        example: coolCategory
        type: string
      userType:
        type: string
    type: object
  models.RoleResponse:
    properties:
      description:
        example: View specifically for event
        type: string
      role:
        example: event-view-volunteer
        type: string
      type:
        example: role
        type: string
    type: object
  models.TokensResponse:
    properties:
      expiresAt:
        type: string
      token:
        type: string
      type:
        example: accessToken
        type: string
    type: object
  models.UpdateUserPasswordRequest:
    properties:
      confirmPassword:
        maxLength: 50
        minLength: 6
        type: string
      password:
        maxLength: 50
        minLength: 6
        type: string
    required:
    - confirmPassword
    - password
    type: object
  models.UpdateUserPasswordResponse:
    properties:
      campusCode:
        type: string
      communityId:
        type: string
      email:
        type: string
      name:
        example: Profesionals
        type: string
      phoneNumber:
        type: string
      roles:
        items:
          type: string
        type: array
      status:
        example: active
        type: string
      type:
        example: coolCategory
        type: string
      userType:
        type: string
    type: object
  models.UserTypeResponse:
    properties:
      description:
        example: Volunteer
        type: string
      name:
        example: Volunteer
        type: string
      roles:
        example:
        - event-view-event-viewer
        items:
          type: string
        type: array
      type:
        example: userType
        type: string
      userType:
        example: volunteer
        type: string
    type: object
  validator.ErrorValidateResponse:
    properties:
      code:
        example: accountNumber_required
        type: string
      field:
        example: MISSING_FIELD
        type: string
      message:
        example: field is missing
        type: string
    type: object
info:
  contact: {}
paths:
  /v1/campuses:
    get:
      consumes:
      - application/json
      description: Get All Roles
      parameters:
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            allOf:
            - $ref: '#/definitions/models.List'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.RoleResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorValidationResponse'
            - properties:
                errors:
                  $ref: '#/definitions/validator.ErrorValidateResponse'
              type: object
      summary: Get All Roles
      tags:
      - roles
  /v1/departments:
    get:
      consumes:
      - application/json
      description: Get Departments from Config
      parameters:
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            allOf:
            - $ref: '#/definitions/models.List'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.DepartmentsResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorValidationResponse'
            - properties:
                errors:
                  $ref: '#/definitions/validator.ErrorValidateResponse'
              type: object
      summary: Get Departments from Config
      tags:
      - config
  /v1/tokens:
    get:
      consumes:
      - application/json
      description: Generate both Access and Refresh Token
      parameters:
      - description: object that needs to be added
        in: path
        name: Cookie
        required: true
        type: string
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            allOf:
            - $ref: '#/definitions/models.List'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.TokensResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorValidationResponse'
            - properties:
                errors:
                  $ref: '#/definitions/validator.ErrorValidateResponse'
              type: object
      summary: Generate Tokens
      tags:
      - tokens
  /v1/users/{communityId}:
    get:
      consumes:
      - application/json
      description: Get all information needed about user by community Id
      parameters:
      - description: object that needs to be added
        in: path
        name: communityId
        required: true
        type: integer
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            allOf:
            - $ref: '#/definitions/models.GetOneByCommunityIdResponse'
            - properties:
                roles:
                  items:
                    $ref: '#/definitions/models.RoleResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorValidationResponse'
            - properties:
                errors:
                  $ref: '#/definitions/validator.ErrorValidateResponse'
              type: object
      summary: Get User By Community ID
      tags:
      - users
  /v1/users/{identifier}/password:
    patch:
      consumes:
      - application/json
      description: Update user Password
      parameters:
      - description: object that needs to be added
        in: path
        name: identifier
        required: true
        type: string
      - description: User object that needs to be added
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserPasswordRequest'
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            $ref: '#/definitions/models.UpdateUserPasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorValidationResponse'
            - properties:
                errors:
                  $ref: '#/definitions/validator.ErrorValidateResponse'
              type: object
      summary: Update User Password
      tags:
      - users
  /v1/users/check/{identifier}:
    get:
      consumes:
      - application/json
      description: To check whether user is exist or not by email or phone number
      parameters:
      - description: object that needs to be added
        in: path
        name: identifier
        required: true
        type: string
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            $ref: '#/definitions/models.CheckUserExistResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorValidationResponse'
            - properties:
                errors:
                  $ref: '#/definitions/validator.ErrorValidateResponse'
              type: object
      summary: Check User Exist
      tags:
      - users
  /v1/users/login:
    post:
      consumes:
      - application/json
      description: Login for all type of users
      parameters:
      - description: User object that needs to be added
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginUserRequest'
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            allOf:
            - $ref: '#/definitions/models.LoginUserResponse'
            - properties:
                tokens:
                  items:
                    $ref: '#/definitions/models.TokensResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorValidationResponse'
            - properties:
                errors:
                  $ref: '#/definitions/validator.ErrorValidateResponse'
              type: object
      summary: Login User
      tags:
      - users
  /v1/users/logout:
    put:
      consumes:
      - application/json
      description: Logout user for all kinds of user
      parameters:
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorValidationResponse'
            - properties:
                errors:
                  $ref: '#/definitions/validator.ErrorValidateResponse'
              type: object
      summary: Logout User
      tags:
      - users
  /v1/users/types:
    get:
      consumes:
      - application/json
      description: User Type is something like volunteer, lead or etc.
      parameters:
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            allOf:
            - $ref: '#/definitions/models.List'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.UserTypeResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorValidationResponse'
            - properties:
                errors:
                  $ref: '#/definitions/validator.ErrorValidateResponse'
              type: object
      summary: Get All User Types
      tags:
      - users
    post:
      consumes:
      - application/json
      description: User Type is something like volunteer, lead or etc.
      parameters:
      - description: User object that needs to be added
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserTypeRequest'
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            $ref: '#/definitions/models.UserTypeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorValidationResponse'
            - properties:
                errors:
                  $ref: '#/definitions/validator.ErrorValidateResponse'
              type: object
      summary: Create User Type
      tags:
      - users
  /v1/users/volunteer:
    post:
      consumes:
      - application/json
      description: Create event with the instances/sessions
      parameters:
      - description: User object that needs to be added
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateEventRequest'
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            allOf:
            - $ref: '#/definitions/models.CreateEventResponse'
            - properties:
                instances:
                  $ref: '#/definitions/models.CreateInstanceResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorValidationResponse'
            - properties:
                errors:
                  $ref: '#/definitions/validator.ErrorValidateResponse'
              type: object
      summary: Create Event
      tags:
      - events
swagger: "2.0"
