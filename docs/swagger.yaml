definitions:
  models.CampusesResponse:
    properties:
      campusCode:
        example: BKS
        type: string
      campusName:
        example: GROW Community Bekasi
        type: string
      type:
        example: campus
        type: string
    type: object
  models.CheckUserExistResponse:
    properties:
      identifier:
        type: string
      type:
        example: user
        type: string
      user:
        type: boolean
    type: object
  models.CreateEventRegistrationRecordRequest:
    properties:
      communityId:
        type: string
      description:
        type: string
      eventCode:
        maxLength: 7
        minLength: 7
        type: string
      identifier:
        type: string
      instanceCode:
        maxLength: 15
        minLength: 15
        type: string
      isPersonalQR:
        description: IsInheritUser bool                                        `json:"isInheritUser"
          validate:"required"`
        type: boolean
      name:
        example: Professionals
        maxLength: 50
        minLength: 1
        type: string
      registerAt:
        type: string
      registrants:
        items:
          $ref: '#/definitions/models.CreateOtherEventRegistrationRecordRequest'
        type: array
    required:
    - eventCode
    - instanceCode
    - registerAt
    - registrants
    type: object
  models.CreateEventRegistrationRecordResponse:
    properties:
      communityId:
        type: string
      description:
        type: string
      eventCode:
        type: string
      eventTitle:
        type: string
      identifier:
        type: string
      instanceCode:
        type: string
      instanceTitle:
        type: string
      name:
        type: string
      registerAt:
        type: string
      registrants:
        items:
          $ref: '#/definitions/models.CreateOtherEventRegistrationRecordResponse'
        type: array
      registrationId:
        type: string
      status:
        type: string
      totalRegistrants:
        type: integer
      type:
        type: string
    type: object
  models.CreateEventRequest:
    properties:
      allowedCampuses:
        items:
          type: string
        type: array
      allowedFor:
        enum:
        - public
        - private
        type: string
      allowedRoles:
        items:
          type: string
        type: array
      allowedUsers:
        items:
          type: string
        type: array
      description:
        type: string
      eventEndAt:
        type: string
      eventStartAt:
        type: string
      instances:
        items:
          $ref: '#/definitions/models.CreateInstanceRequest'
        type: array
      isRecurring:
        type: boolean
      locationName:
        type: string
      locationType:
        enum:
        - online
        - onsite
        - hybrid
        type: string
      name:
        type: string
      recurrence:
        type: string
      registerEndAt:
        type: string
      registerStartAt:
        type: string
      termsAndConditions:
        type: string
      topics:
        items:
          type: string
        type: array
    required:
    - allowedCampuses
    - allowedFor
    - allowedRoles
    - allowedUsers
    - instances
    - locationName
    - locationType
    - name
    type: object
  models.CreateEventResponse:
    properties:
      allowedCampuses:
        items:
          type: string
        type: array
      allowedFor:
        example: public
        type: string
      allowedRoles:
        items:
          type: string
        type: array
      allowedUsers:
        items:
          type: string
        type: array
      code:
        example: bhfe382
        type: string
      description:
        example: This event blabla
        type: string
      eventEndAt:
        example: ""
        type: string
      eventStartAt:
        example: ""
        type: string
      instances:
        items:
          $ref: '#/definitions/models.CreateInstanceResponse'
        type: array
      isRecurring:
        example: true
        type: boolean
      locationName:
        example: PIOT 6 Lt. 6
        type: string
      locationType:
        example: offline
        type: string
      recurrence:
        example: monthly
        type: string
      registerEndAt:
        example: ""
        type: string
      registerStartAt:
        example: ""
        type: string
      status:
        example: available
        type: string
      termsAndConditions:
        example: This event blabla
        type: string
      title:
        example: Homebase
        type: string
      topics:
        items:
          type: string
        type: array
      type:
        example: event
        type: string
    required:
    - instances
    type: object
  models.CreateInstanceExistingEventRequest:
    properties:
      allowVerifyAt:
        type: string
      checkType:
        enum:
        - check-in
        - check-out
        - both
        - none
        type: string
      description:
        type: string
      disallowVerifyAt:
        type: string
      eventCode:
        type: string
      instanceEndAt:
        type: string
      instanceStartAt:
        type: string
      isOnePerAccount:
        type: boolean
      isOnePerTicket:
        type: boolean
      isUpdateEventTime:
        type: boolean
      locationName:
        type: string
      locationType:
        enum:
        - online
        - onsite
        - hybrid
        type: string
      maxPerTransaction:
        type: integer
      registerEndAt:
        type: string
      registerFlow:
        enum:
        - personal-qr
        - event-qr
        - both-qr
        - none
        type: string
      registerStartAt:
        type: string
      title:
        type: string
      totalSeats:
        type: integer
    required:
    - allowVerifyAt
    - disallowVerifyAt
    - eventCode
    - instanceEndAt
    - instanceStartAt
    - locationName
    - locationType
    - registerEndAt
    - registerStartAt
    - title
    type: object
  models.CreateInstanceRequest:
    properties:
      allowVerifyAt:
        type: string
      checkType:
        enum:
        - check-in
        - check-out
        - both
        - none
        type: string
      description:
        type: string
      disallowVerifyAt:
        type: string
      instanceEndAt:
        type: string
      instanceStartAt:
        type: string
      isOnePerAccount:
        type: boolean
      isOnePerTicket:
        type: boolean
      locationName:
        type: string
      locationType:
        enum:
        - online
        - onsite
        - hybrid
        type: string
      maxPerTransaction:
        type: integer
      registerEndAt:
        type: string
      registerFlow:
        enum:
        - personal-qr
        - event-qr
        - both-qr
        - none
        type: string
      registerStartAt:
        type: string
      title:
        type: string
      totalSeats:
        type: integer
    required:
    - allowVerifyAt
    - disallowVerifyAt
    - instanceEndAt
    - instanceStartAt
    - locationName
    - locationType
    - registerEndAt
    - registerStartAt
    - title
    type: object
  models.CreateInstanceResponse:
    properties:
      allowVerifyAt:
        type: string
      checkType:
        type: string
      description:
        type: string
      disallowVerifyAt:
        type: string
      eventCode:
        type: string
      instanceCode:
        type: string
      instanceEndAt:
        type: string
      instanceStartAt:
        type: string
      isOnePerAccount:
        type: boolean
      isOnePerTicket:
        type: boolean
      locationName:
        type: string
      locationType:
        type: string
      maxPerTransaction:
        type: integer
      registerEndAt:
        type: string
      registerFlow:
        type: string
      registerStartAt:
        type: string
      status:
        example: active
        type: string
      title:
        type: string
      totalSeats:
        type: integer
      type:
        type: string
    type: object
  models.CreateOtherEventRegistrationRecordRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  models.CreateOtherEventRegistrationRecordResponse:
    properties:
      id:
        type: string
      name:
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  models.CreateRoleRequest:
    properties:
      description:
        example: View specifically for event
        type: string
      role:
        example: event-view-volunteer
        type: string
    required:
    - role
    type: object
  models.CreateUserRequest:
    properties:
      address:
        type: string
      campusCode:
        example: "001"
        maxLength: 3
        minLength: 3
        type: string
      coolId:
        example: 1
        type: integer
      dateOfBirth:
        type: string
      department_code:
        example: MUSIC
        type: string
      email:
        example: jeremy@gmail.com
        type: string
      gender:
        enum:
        - male
        - female
        type: string
      isBaptized:
        type: boolean
      isKom100:
        type: boolean
      jemaatId:
        type: string
      kkjNumber:
        type: string
      maritalStatus:
        enum:
        - single
        - married
        - others
        example: active
        type: string
      name:
        example: Professionals
        maxLength: 50
        minLength: 1
        type: string
      password:
        example: Professionals
        maxLength: 50
        minLength: 6
        type: string
      phoneNumber:
        type: string
      placeOfBirth:
        type: string
      userTypes:
        example:
        - volunteer
        items:
          type: string
        type: array
    required:
    - dateOfBirth
    - name
    - password
    - placeOfBirth
    - userTypes
    type: object
  models.CreateUserResponse:
    properties:
      address:
        type: string
      campusCode:
        type: string
      communityId:
        type: string
      coolId:
        example: 1
        type: integer
      dateOfBirth:
        type: string
      departmentCode:
        type: string
      email:
        type: string
      gender:
        type: string
      isBaptized:
        type: boolean
      isKom100:
        type: boolean
      jemaatId:
        type: string
      kkjNumber:
        type: string
      maritalStatus:
        type: string
      name:
        example: Profesionals
        type: string
      phoneNumber:
        type: string
      placeOfBirth:
        type: string
      status:
        example: active
        type: string
      type:
        example: user
        type: string
      userTypes:
        items:
          type: string
        type: array
    type: object
  models.CreateUserTypeRequest:
    properties:
      category:
        enum:
        - general
        - internal
        - cool
        type: string
      description:
        example: General Volunteer
        type: string
      name:
        example: Volunteer
        type: string
      roles:
        example:
        - event-view-volunteer
        - ' event-edit-volunteer'
        items:
          type: string
        type: array
      userType:
        example: volunteer
        type: string
    required:
    - category
    - name
    - roles
    - userType
    type: object
  models.CreateVolunteerRequest:
    properties:
      address:
        type: string
      campusCode:
        example: "001"
        maxLength: 3
        minLength: 3
        type: string
      coolId:
        example: 1
        type: integer
      dateOfBirth:
        type: string
      department_code:
        example: MUSIC
        type: string
      email:
        example: jeremy@gmail.com
        type: string
      gender:
        enum:
        - male
        - female
        type: string
      isBaptized:
        type: boolean
      isKom100:
        type: boolean
      jemaatId:
        type: string
      kkjNumber:
        type: string
      maritalStatus:
        enum:
        - single
        - married
        - others
        example: active
        type: string
      name:
        example: Professionals
        maxLength: 50
        minLength: 1
        type: string
      password:
        example: Professionals
        maxLength: 50
        minLength: 6
        type: string
      phoneNumber:
        type: string
      placeOfBirth:
        type: string
      userTypes:
        example:
        - volunteer
        items:
          type: string
        type: array
    required:
    - coolId
    - dateOfBirth
    - department_code
    - isBaptized
    - isKom100
    - name
    - password
    - placeOfBirth
    - userTypes
    type: object
  models.CreateVolunteerResponse:
    properties:
      address:
        type: string
      campusCode:
        type: string
      communityId:
        type: string
      coolId:
        example: 1
        type: integer
      dateOfBirth:
        type: string
      departmentCode:
        type: string
      email:
        type: string
      gender:
        type: string
      isBaptized:
        type: boolean
      isKom100:
        type: boolean
      jemaatId:
        type: string
      kkjNumber:
        type: string
      maritalStatus:
        type: string
      name:
        example: Profesionals
        type: string
      phoneNumber:
        type: string
      placeOfBirth:
        type: string
      status:
        example: active
        type: string
      type:
        example: coolCategory
        type: string
      userTypes:
        items:
          type: string
        type: array
    type: object
  models.CursorInfo:
    properties:
      limit:
        type: integer
      next:
        type: string
      parameters: {}
      previous:
        type: string
      totalData:
        type: integer
    type: object
  models.DeleteUserResponse:
    properties:
      communityId:
        type: string
      email:
        type: string
      isExist:
        type: boolean
      name:
        type: string
      phoneNumber:
        type: string
      type:
        type: string
    type: object
  models.DepartmentsResponse:
    properties:
      departmentCode:
        example: TC
        type: string
      departmentName:
        example: Take Care Department
        type: string
      type:
        example: department
        type: string
    type: object
  models.ErrorResponse:
    properties:
      code:
        type: integer
      errors: {}
      message:
        type: string
      metadata:
        $ref: '#/definitions/models.Metadata'
      status:
        type: string
    type: object
  models.ErrorValidateResponse:
    properties:
      code:
        example: accountNumber_required
        type: string
      field:
        example: MISSING_FIELD
        type: string
      message:
        example: field is missing
        type: string
    type: object
  models.GetAllEventsResponse:
    properties:
      allowedCampuses:
        items:
          type: string
        type: array
      allowedFor:
        example: public
        type: string
      allowedRoles:
        items:
          type: string
        type: array
      allowedUsers:
        items:
          type: string
        type: array
      availabilityStatus:
        example: available
        type: string
      code:
        example: 2024-HOMEBASE
        type: string
      eventEndAt:
        example: ""
        type: string
      eventStartAt:
        example: ""
        type: string
      imagesLinks:
        items:
          type: string
        type: array
      isRecurring:
        example: true
        type: boolean
      locationType:
        example: offline
        type: string
      recurrence:
        example: monthly
        type: string
      registerEndAt:
        example: ""
        type: string
      registerStartAt:
        example: ""
        type: string
      title:
        example: Homebase
        type: string
      topics:
        items:
          type: string
        type: array
      totalRemainingSeats:
        example: 2
        type: integer
      type:
        example: Event
        type: string
    type: object
  models.GetAllRegisteredUserResponse:
    properties:
      code:
        type: string
      description:
        type: string
      endAt:
        type: string
      imageLinks:
        items:
          type: string
        type: array
      instances:
        items:
          $ref: '#/definitions/models.InstancesForRegisteredRecordsResponse'
        type: array
      locationName:
        type: string
      locationType:
        type: string
      startAt:
        type: string
      status:
        type: string
      termsAndConditions:
        type: string
      title:
        type: string
      type:
        type: string
    type: object
  models.GetAllUserCursorResponse:
    properties:
      address:
        type: string
      campusCode:
        type: string
      campusName:
        type: string
      communityId:
        type: string
      coolId:
        type: integer
      coolName:
        type: string
      createdAt:
        type: string
      dateOfBirth:
        type: string
      deletedAt:
        type: string
      departmentCode:
        type: string
      departmentName:
        type: string
      email:
        type: string
      gender:
        type: string
      isBaptized:
        type: boolean
      isKom100:
        type: boolean
      jemaatId:
        type: string
      kkjNumber:
        type: string
      maritalStatus:
        type: string
      name:
        type: string
      phoneNumber:
        type: string
      placeOfBirth:
        type: string
      roles:
        items:
          type: string
        type: array
      status:
        type: string
      type:
        type: string
      updatedAt:
        type: string
      userTypes:
        items:
          type: string
        type: array
    type: object
  models.GetEventByCodeResponse:
    properties:
      allowedCampuses:
        items:
          type: string
        type: array
      allowedFor:
        example: public
        type: string
      allowedRoles:
        items:
          type: string
        type: array
      allowedUsers:
        items:
          type: string
        type: array
      availabilityStatus:
        example: available
        type: string
      code:
        example: bhfe382
        type: string
      description:
        example: This event blabla
        type: string
      eventEndAt:
        example: ""
        type: string
      eventStartAt:
        example: ""
        type: string
      imageLinks:
        items:
          type: string
        type: array
      instances:
        items:
          $ref: '#/definitions/models.GetInstancesByEventCodeResponse'
        type: array
      isRecurring:
        example: true
        type: boolean
      locationName:
        example: PIOT 6 Lt. 6
        type: string
      locationType:
        example: offline
        type: string
      recurrence:
        example: monthly
        type: string
      registerEndAt:
        example: ""
        type: string
      registerStartAt:
        example: ""
        type: string
      termsAndConditions:
        example: This event blabla
        type: string
      title:
        example: Homebase
        type: string
      topics:
        items:
          type: string
        type: array
      type:
        example: event
        type: string
    type: object
  models.GetEventSummaryResponse:
    properties:
      allowedCampuses:
        example:
        - BKS
        - ' BKT'
        items:
          type: string
        type: array
      allowedFor:
        example: volunteer
        type: string
      allowedRoles:
        example:
        - event-view-volunteer
        - ' event-edit-volunteer'
        items:
          type: string
        type: array
      allowedUsers:
        example:
        - user-1
        - ' user-2'
        items:
          type: string
        type: array
      code:
        example: event-1
        type: string
      status:
        example: active
        type: string
      title:
        example: Event 1
        type: string
      totalBookedSeats:
        example: 3003
        type: integer
      totalScannedSeats:
        example: 309
        type: integer
      totalUsers:
        example: 309
        type: integer
      type:
        example: event
        type: string
    type: object
  models.GetEventTitlesResponse:
    properties:
      code:
        example: event-1
        type: string
      title:
        example: Event 1
        type: string
      type:
        example: event
        type: string
    type: object
  models.GetInstanceSummaryResponse:
    properties:
      attendPercentage:
        example: 50
        type: number
      bookedSeats:
        example: 50
        type: integer
      checkType:
        example: online
        type: string
      code:
        example: instance-1
        type: string
      eventCode:
        example: event-1
        type: string
      maxPerTransaction:
        example: 5
        type: integer
      registerFlow:
        example: online
        type: string
      scannedSeats:
        example: 50
        type: integer
      status:
        example: active
        type: string
      title:
        example: Instance 1
        type: string
      totalRemainingSeats:
        example: 50
        type: integer
      totalSeats:
        example: 100
        type: integer
      type:
        example: instance
        type: string
    type: object
  models.GetInstancesByEventCodeResponse:
    properties:
      LocationName:
        example: PIOT 6 Lt. 6
        type: string
      allowVerifyAt:
        example: ""
        type: string
      availabilityStatus:
        example: available
        type: string
      bookedSeats:
        example: 0
        type: integer
      checkType:
        type: string
      code:
        example: 2024-HOMEBASE
        type: string
      description:
        example: Homebase
        type: string
      disallowVerifyAt:
        example: ""
        type: string
      instanceEndAt:
        example: ""
        type: string
      instanceStartAt:
        example: ""
        type: string
      isOnePerAccount:
        type: boolean
      isOnePerTicket:
        type: boolean
      locationType:
        example: offline
        type: string
      maxPerTransaction:
        type: integer
      registerEndAt:
        example: ""
        type: string
      registerFlow:
        type: string
      registerStartAt:
        example: ""
        type: string
      title:
        example: Homebase
        type: string
      totalRemainingSeats:
        example: 0
        type: integer
      totalSeats:
        example: 0
        type: integer
      type:
        example: eventInstance
        type: string
    type: object
  models.GetOneByCommunityIdResponse:
    properties:
      address:
        type: string
      campusCode:
        type: string
      campusName:
        type: string
      communityId:
        type: string
      coolId:
        example: 1
        type: integer
      coolName:
        type: string
      dateOfBirth:
        type: string
      departmentCode:
        type: string
      departmentName:
        type: string
      email:
        type: string
      gender:
        type: string
      isBaptized:
        type: boolean
      isKom100:
        type: boolean
      jemaatId:
        type: string
      kkjNumber:
        type: string
      maritalStatus:
        type: string
      name:
        example: Profesionals
        type: string
      phoneNumber:
        type: string
      placeOfBirth:
        type: string
      roles:
        items:
          $ref: '#/definitions/models.RoleResponse'
        type: array
      status:
        example: active
        type: string
      type:
        example: coolCategory
        type: string
      userTypes:
        items:
          type: string
        type: array
    type: object
  models.GetRelationAtProfileResponse:
    properties:
      communityId:
        type: string
      name:
        type: string
      relationType:
        type: string
      type:
        type: string
    type: object
  models.GetUserProfileResponse:
    properties:
      address:
        type: string
      campusCode:
        type: string
      campusName:
        type: string
      communityId:
        type: string
      coolId:
        type: integer
      coolName:
        type: string
      dateOfBirth:
        type: string
      dateOfMarriage:
        type: string
      departmentCode:
        type: string
      departmentName:
        type: string
      educationLevel:
        type: string
      email:
        type: string
      employmentStatus:
        type: string
      gender:
        type: string
      isBaptized:
        type: boolean
      isKom100:
        type: boolean
      jemaatId:
        type: string
      kkjNumber:
        type: string
      maritalStatus:
        type: string
      name:
        type: string
      phoneNumber:
        type: string
      placeOfBirth:
        type: string
      relations:
        items:
          $ref: '#/definitions/models.GetRelationAtProfileResponse'
        type: array
      role:
        items:
          $ref: '#/definitions/models.RoleResponse'
        type: array
      status:
        type: string
      type:
        type: string
      userType:
        items:
          $ref: '#/definitions/models.UserTypeSummaryResponse'
        type: array
    type: object
  models.InstancesForRegisteredRecordsResponse:
    properties:
      code:
        type: string
      description:
        type: string
      instanceEndAt:
        type: string
      instanceStartAt:
        type: string
      locationName:
        type: string
      locationType:
        type: string
      registrants:
        items:
          $ref: '#/definitions/models.UserRegisteredRecordsResponse'
        type: array
      status:
        type: string
      title:
        type: string
      type:
        type: string
    type: object
  models.List:
    properties:
      data: {}
      totalRows:
        type: integer
      type:
        example: collection
        type: string
    type: object
  models.ListWithDetail:
    properties:
      data: {}
      details: {}
      totalRows:
        type: integer
      type:
        example: collection
        type: string
    type: object
  models.LoginUserRequest:
    properties:
      identifier:
        type: string
      password:
        type: string
    required:
    - identifier
    - password
    type: object
  models.LoginUserResponse:
    properties:
      address:
        type: string
      campusCode:
        type: string
      communityId:
        type: string
      coolId:
        example: 1
        type: integer
      dateOfBirth:
        type: string
      departmentCode:
        type: string
      email:
        type: string
      gender:
        type: string
      isBaptized:
        type: boolean
      isKom100:
        type: boolean
      jemaatId:
        type: string
      kkjNumber:
        type: string
      maritalStatus:
        type: string
      name:
        example: Profesionals
        type: string
      phoneNumber:
        type: string
      placeOfBirth:
        type: string
      roles:
        items:
          type: string
        type: array
      status:
        example: active
        type: string
      tokens:
        items: {}
        type: array
      type:
        example: coolCategory
        type: string
      userTypes:
        items:
          type: string
        type: array
    type: object
  models.Metadata:
    properties:
      requestId:
        type: string
      timestamp:
        type: string
      totalRows:
        type: integer
    type: object
  models.Pagination:
    properties:
      data: {}
      details: {}
      pagination: {}
      type:
        example: collection
        type: string
    type: object
  models.RelationUpdateProfile:
    properties:
      communityId:
        type: string
      type:
        enum:
        - spouse
        - parent
        - child
        type: string
    required:
    - communityId
    - type
    type: object
  models.RoleResponse:
    properties:
      description:
        example: View specifically for event
        type: string
      role:
        example: event-view-volunteer
        type: string
      type:
        example: role
        type: string
    type: object
  models.TokensResponse:
    properties:
      expiresAt:
        type: string
      token:
        type: string
      type:
        example: accessToken
        type: string
    type: object
  models.UpdateProfileRequest:
    properties:
      address:
        type: string
      campusCode:
        example: "001"
        maxLength: 3
        minLength: 3
        type: string
      coolId:
        type: integer
      dateOfBirth:
        type: string
      dateOfMarriage:
        type: string
      deleteRelationCommunityIds:
        items:
          type: string
        type: array
      departmentCode:
        example: MUSIC
        type: string
      educationLevel:
        type: string
      email:
        example: jeremy@gmail.com
        type: string
      employmentStatus:
        type: string
      gender:
        enum:
        - male
        - female
        type: string
      isBaptized:
        type: boolean
      isKom100:
        type: boolean
      jemaatId:
        type: string
      kkjNumber:
        type: string
      maritalStatus:
        enum:
        - single
        - married
        - others
        example: active
        type: string
      name:
        example: Professionals
        maxLength: 50
        minLength: 1
        type: string
      phoneNumber:
        type: string
      placeOfBirth:
        type: string
      relation:
        items:
          $ref: '#/definitions/models.RelationUpdateProfile'
        type: array
    required:
    - campusCode
    - gender
    - maritalStatus
    - name
    type: object
  models.UpdateProfileResponse:
    properties:
      address:
        type: string
      campusCode:
        type: string
      communityId:
        type: string
      coolId:
        type: integer
      dateOfBirth:
        type: string
      dateOfMarriage:
        type: string
      deleteRelationCommunityIds:
        items:
          type: string
        type: array
      departmentCode:
        type: string
      educationLevel:
        type: string
      email:
        type: string
      employmentStatus:
        type: string
      gender:
        type: string
      isBaptized:
        type: boolean
      isKom100:
        type: boolean
      jemaatId:
        type: string
      kkjNumber:
        type: string
      maritalStatus:
        type: string
      name:
        type: string
      phoneNumber:
        type: string
      placeOfBirth:
        type: string
      relation:
        items:
          $ref: '#/definitions/models.RelationUpdateProfile'
        type: array
      status:
        type: string
      type:
        type: string
    type: object
  models.UpdateRegistrationStatusRequest:
    properties:
      reason:
        type: string
      status:
        enum:
        - success
        - cancelled
        - permit
        example: success
        type: string
      updatedAt:
        type: string
    required:
    - status
    - updatedAt
    type: object
  models.UpdateRegistrationStatusResponse:
    properties:
      communityId:
        type: string
      eventCode:
        type: string
      eventTitle:
        type: string
      identifier:
        type: string
      instanceCode:
        type: string
      instanceTitle:
        type: string
      name:
        type: string
      reason:
        type: string
      registrationId:
        type: string
      status:
        type: string
      type:
        type: string
      updatedBy:
        type: string
      verifiedAt:
        type: string
    type: object
  models.UpdateRolesOrUserTypesRequest:
    properties:
      changes:
        items:
          type: string
        type: array
      communityIds:
        items:
          type: string
        type: array
      field:
        enum:
        - role
        - userType
        type: string
    required:
    - changes
    - communityIds
    - field
    type: object
  models.UpdateRolesOrUserTypesResponse:
    properties:
      changes:
        items:
          type: string
        type: array
      communityIds:
        items:
          type: string
        type: array
      field:
        type: string
      type:
        example: user
        type: string
    type: object
  models.UpdateUserPasswordRequest:
    properties:
      confirmPassword:
        maxLength: 50
        minLength: 6
        type: string
      password:
        maxLength: 50
        minLength: 6
        type: string
    required:
    - confirmPassword
    - password
    type: object
  models.UpdateUserPasswordResponse:
    properties:
      campusCode:
        type: string
      communityId:
        type: string
      email:
        type: string
      name:
        example: Profesionals
        type: string
      phoneNumber:
        type: string
      roles:
        items:
          type: string
        type: array
      status:
        example: active
        type: string
      type:
        example: coolCategory
        type: string
      userTypes:
        items:
          type: string
        type: array
    type: object
  models.UpdateUserRequest:
    properties:
      address:
        type: string
      campusCode:
        example: "001"
        maxLength: 3
        minLength: 3
        type: string
      coolId:
        type: integer
      dateOfBirth:
        type: string
      dateOfMarriage:
        type: string
      deleteRelationCommunityIds:
        items:
          type: string
        type: array
      departmentCode:
        example: MUSIC
        type: string
      educationLevel:
        type: string
      email:
        example: jeremy@gmail.com
        type: string
      employmentStatus:
        type: string
      gender:
        enum:
        - male
        - female
        type: string
      isBaptized:
        type: boolean
      isKom100:
        type: boolean
      jemaatId:
        type: string
      kkjNumber:
        type: string
      maritalStatus:
        enum:
        - single
        - married
        - others
        example: active
        type: string
      name:
        example: Professionals
        maxLength: 50
        minLength: 1
        type: string
      phoneNumber:
        type: string
      placeOfBirth:
        type: string
      relation:
        items:
          $ref: '#/definitions/models.RelationUpdateProfile'
        type: array
      roles:
        example:
        - volunteer
        items:
          type: string
        type: array
      userTypes:
        example:
        - volunteer
        items:
          type: string
        type: array
    required:
    - campusCode
    - gender
    - maritalStatus
    - name
    - roles
    - userTypes
    type: object
  models.UpdateUserResponse:
    properties:
      address:
        type: string
      campusCode:
        type: string
      communityId:
        type: string
      coolId:
        type: integer
      dateOfBirth:
        type: string
      dateOfMarriage:
        type: string
      deleteRelationCommunityIds:
        items:
          type: string
        type: array
      departmentCode:
        type: string
      educationLevel:
        type: string
      email:
        type: string
      employmentStatus:
        type: string
      gender:
        type: string
      isBaptized:
        type: boolean
      isKom100:
        type: boolean
      jemaatId:
        type: string
      kkjNumber:
        type: string
      maritalStatus:
        type: string
      name:
        type: string
      phoneNumber:
        type: string
      placeOfBirth:
        type: string
      relation:
        items:
          $ref: '#/definitions/models.RelationUpdateProfile'
        type: array
      roles:
        items:
          type: string
        type: array
      status:
        type: string
      type:
        type: string
      userTypes:
        items:
          type: string
        type: array
    type: object
  models.UserRegisteredRecordsResponse:
    properties:
      communityId:
        type: string
      communityIdOrigin:
        type: string
      id:
        type: string
      identifier:
        type: string
      identifierOrigin:
        type: string
      isPersonalQr:
        type: boolean
      name:
        type: string
      registeredAt:
        type: string
      registrationStatus:
        type: string
      type:
        type: string
      updatedBy:
        type: string
      verifiedAt:
        type: string
    type: object
  models.UserTypeResponse:
    properties:
      category:
        example: general
        type: string
      description:
        example: Volunteer
        type: string
      name:
        example: Volunteer
        type: string
      roles:
        example:
        - event-view-event-viewer
        items:
          type: string
        type: array
      type:
        example: userType
        type: string
      userType:
        example: volunteer
        type: string
    type: object
  models.UserTypeSummaryResponse:
    properties:
      name:
        example: Volunteer
        type: string
      type:
        example: userType
        type: string
      userType:
        example: volunteer
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v2/campuses:
    get:
      consumes:
      - application/json
      description: Get Campuses from Config
      parameters:
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            allOf:
            - $ref: '#/definitions/models.List'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.CampusesResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      summary: Get Campuses from Config
      tags:
      - config
  /api/v2/departments:
    get:
      consumes:
      - application/json
      description: Get Departments from Config
      parameters:
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            allOf:
            - $ref: '#/definitions/models.List'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.DepartmentsResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      summary: Get Departments from Config
      tags:
      - config
  /api/v2/internal/users:
    get:
      consumes:
      - application/json
      description: Get all information needed about user in list
      parameters:
      - description: 'can only be: communityId, name, email, phoneNumber'
        in: path
        name: searchBy
        required: true
        type: string
      - description: inputted search based on searchBy
        in: path
        name: search
        required: true
        type: string
      - description: Pagination
        in: path
        name: cursor
        required: true
        type: string
      - description: pagination direction - prev or next
        in: path
        name: direction
        required: true
        type: string
      - description: how many data that user want to load
        in: path
        name: limit
        required: true
        type: integer
      - description: filter by campus
        in: path
        name: campusCode
        required: true
        type: integer
      - description: filter by cool
        in: path
        name: coolId
        required: true
        type: integer
      - description: filter by department
        in: path
        name: departmentCode
        required: true
        type: integer
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            allOf:
            - $ref: '#/definitions/models.Pagination'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.GetAllUserCursorResponse'
                  type: array
                pagination:
                  $ref: '#/definitions/models.CursorInfo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      summary: Get All Users
      tags:
      - users-internal
  /api/v2/users/roles-types/update:
    put:
      consumes:
      - application/json
      description: Update Role or user Type
      parameters:
      - description: User object that needs to be added
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateRolesOrUserTypesRequest'
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            $ref: '#/definitions/models.UpdateRolesOrUserTypesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      summary: Update User Role or User Type
      tags:
      - users
  /v2/events:
    get:
      consumes:
      - application/json
      description: Get All Events based on User Roles
      parameters:
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            allOf:
            - $ref: '#/definitions/models.List'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.GetAllEventsResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Get All Events
      tags:
      - events
  /v2/events/{code}:
    get:
      consumes:
      - application/json
      description: Get Event and Instances by Event Code
      parameters:
      - description: object that needs to be added
        in: path
        name: code
        required: true
        type: integer
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            allOf:
            - $ref: '#/definitions/models.ListWithDetail'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.GetInstancesByEventCodeResponse'
                  type: array
                details:
                  $ref: '#/definitions/models.GetEventByCodeResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Get Event by Event Code
      tags:
      - events
  /v2/events/registers:
    get:
      consumes:
      - application/json
      description: For Internal Purposes Only
      parameters:
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            allOf:
            - $ref: '#/definitions/models.List'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.GetEventTitlesResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Get Events Titles
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Register user to particular event and instances
      parameters:
      - description: User object that needs to be added
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateEventRegistrationRecordRequest'
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            allOf:
            - $ref: '#/definitions/models.CreateEventRegistrationRecordResponse'
            - properties:
                registrants:
                  $ref: '#/definitions/models.CreateOtherEventRegistrationRecordRequest'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Register User to Event
      tags:
      - events
  /v2/events/registers/{id}/status:
    patch:
      consumes:
      - application/json
      description: Update user registration id to success or failed
      parameters:
      - description: registration id
        in: path
        name: id
        required: true
        type: string
      - description: User object that needs to be added
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateRegistrationStatusRequest'
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            $ref: '#/definitions/models.UpdateRegistrationStatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      summary: Update Registration Status
      tags:
      - events
  /v2/internal/events:
    post:
      consumes:
      - application/json
      description: Create event with the instances/sessions
      parameters:
      - description: User object that needs to be added
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateEventRequest'
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            allOf:
            - $ref: '#/definitions/models.CreateEventResponse'
            - properties:
                instances:
                  $ref: '#/definitions/models.CreateInstanceResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Create Event
      tags:
      - events
  /v2/internal/events/{eventCode}/summary:
    get:
      consumes:
      - application/json
      description: For Internal Purposes Only
      parameters:
      - description: object that needs to be added
        in: path
        name: code
        required: true
        type: integer
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            allOf:
            - $ref: '#/definitions/models.ListWithDetail'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.GetInstanceSummaryResponse'
                  type: array
                details:
                  $ref: '#/definitions/models.GetEventSummaryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Get Event and Sessions by Event Code
      tags:
      - events
  /v2/internal/events/instances:
    post:
      consumes:
      - application/json
      description: Create instance from existing Event
      parameters:
      - description: User object that needs to be added
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateInstanceExistingEventRequest'
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            $ref: '#/definitions/models.CreateInstanceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Create Instance
      tags:
      - events
  /v2/internal/users/{communityId}:
    delete:
      consumes:
      - application/json
      description: Update user through their own profile
      parameters:
      - description: object that needs to be added
        in: path
        name: communityId
        required: true
        type: string
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            $ref: '#/definitions/models.DeleteUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      summary: Update User Profile
      tags:
      - users-internal
  /v2/internal/users/{communityId}/update:
    patch:
      consumes:
      - application/json
      description: Update user through their own profile
      parameters:
      - description: object that needs to be added
        in: path
        name: communityId
        required: true
        type: string
      - description: User object that needs to be added
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            $ref: '#/definitions/models.UpdateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      summary: Update User Profile
      tags:
      - users-internal
  /v2/roles:
    get:
      consumes:
      - application/json
      description: Get All Roles
      parameters:
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            allOf:
            - $ref: '#/definitions/models.List'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.RoleResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      summary: Get All Roles
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Create roles which would be for access
      parameters:
      - description: User object that needs to be added
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateRoleRequest'
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            $ref: '#/definitions/models.RoleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      summary: Create Roles
      tags:
      - roles
  /v2/tokens:
    get:
      consumes:
      - application/json
      description: Generate both Access and Refresh Token
      parameters:
      - description: object that needs to be added
        in: path
        name: Cookie
        required: true
        type: string
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            allOf:
            - $ref: '#/definitions/models.List'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.TokensResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      summary: Generate Tokens
      tags:
      - tokens
  /v2/users:
    get:
      consumes:
      - application/json
      description: Get all information needed about user by community id
      parameters:
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            allOf:
            - $ref: '#/definitions/models.GetOneByCommunityIdResponse'
            - properties:
                roles:
                  items:
                    $ref: '#/definitions/models.RoleResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Get User By Access Token
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create user for all
      parameters:
      - description: User object that needs to be added
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            $ref: '#/definitions/models.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      summary: Create User
      tags:
      - users
  /v2/users/{communityId}:
    get:
      consumes:
      - application/json
      description: Get all information needed about user by community id
      parameters:
      - description: object that needs to be added
        in: path
        name: communityId
        required: true
        type: integer
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            allOf:
            - $ref: '#/definitions/models.GetOneByCommunityIdResponse'
            - properties:
                roles:
                  items:
                    $ref: '#/definitions/models.RoleResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      summary: Get User By Community ID
      tags:
      - users
  /v2/users/{communityId}/profile:
    get:
      consumes:
      - application/json
      description: Get all information needed about user by community id for profile
      parameters:
      - description: object that needs to be added
        in: path
        name: communityId
        required: true
        type: integer
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            $ref: '#/definitions/models.GetUserProfileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      summary: Get User Profile By Community ID
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Update user through their own profile
      parameters:
      - description: object that needs to be added
        in: path
        name: communityId
        required: true
        type: string
      - description: User object that needs to be added
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProfileRequest'
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            $ref: '#/definitions/models.UpdateProfileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      summary: Update User Profile
      tags:
      - users
  /v2/users/{identifier}/password:
    patch:
      consumes:
      - application/json
      description: Update user Password
      parameters:
      - description: object that needs to be added
        in: path
        name: identifier
        required: true
        type: string
      - description: User object that needs to be added
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserPasswordRequest'
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            $ref: '#/definitions/models.UpdateUserPasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      summary: Update User Password
      tags:
      - users
  /v2/users/check/{identifier}:
    get:
      consumes:
      - application/json
      description: To check whether user is existed or not by email or phone number
      parameters:
      - description: object that needs to be added
        in: path
        name: identifier
        required: true
        type: string
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            $ref: '#/definitions/models.CheckUserExistResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      summary: Check User Exist
      tags:
      - users
  /v2/users/login:
    post:
      consumes:
      - application/json
      description: Login for all type of users
      parameters:
      - description: User object that needs to be added
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginUserRequest'
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            allOf:
            - $ref: '#/definitions/models.LoginUserResponse'
            - properties:
                tokens:
                  items:
                    $ref: '#/definitions/models.TokensResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      summary: Login User
      tags:
      - users
  /v2/users/logout:
    put:
      consumes:
      - application/json
      description: Logout user for all kinds of user
      parameters:
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      summary: Logout User
      tags:
      - users
  /v2/users/types:
    get:
      consumes:
      - application/json
      description: User Type is something like volunteer, lead or etc.
      parameters:
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            allOf:
            - $ref: '#/definitions/models.List'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.UserTypeResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      summary: Get All User Types
      tags:
      - users
    post:
      consumes:
      - application/json
      description: User Type is something like volunteer, lead or etc.
      parameters:
      - description: User object that needs to be added
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserTypeRequest'
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            $ref: '#/definitions/models.UserTypeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      summary: Create User Type
      tags:
      - users
  /v2/users/volunteer:
    post:
      consumes:
      - application/json
      description: Create user for volunteer
      parameters:
      - description: User object that needs to be added
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateVolunteerRequest'
      - description: mandatory header to access endpoint
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Response indicates that the request succeeded and the resources
            has been fetched and transmitted in the message body
          schema:
            $ref: '#/definitions/models.CreateVolunteerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error. This can happen if there is an error validation
            while create account
          schema:
            allOf:
            - $ref: '#/definitions/models.ErrorResponse'
            - properties:
                errors:
                  $ref: '#/definitions/models.ErrorValidateResponse'
              type: object
      summary: Create Volunteer User
      tags:
      - users
swagger: "2.0"
